<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[时之殇]]></title>
  <link href="http://wyj2046.github.io/atom.xml" rel="self"/>
  <link href="http://wyj2046.github.io/"/>
  <updated>2013-05-03T21:13:50+08:00</updated>
  <id>http://wyj2046.github.io/</id>
  <author>
    <name><![CDATA[豆豆蛙]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[今天你应当学习Emacs Lisp的5点理由(译)]]></title>
    <link href="http://wyj2046.github.io/blog/2013/05/03/5-reasons-why-you-should-learn-emacs-lisp-today/"/>
    <updated>2013-05-03T18:12:00+08:00</updated>
    <id>http://wyj2046.github.io/blog/2013/05/03/5-reasons-why-you-should-learn-emacs-lisp-today</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">原文链接</h2>
<div class="outline-text-2" id="text-1">

<p>  <a href="http://joelmccracken.github.io/entries/why-you-should-learn-elisp/">http://joelmccracken.github.io/entries/why-you-should-learn-elisp/</a>
</p></div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">前言</h2>
<div class="outline-text-2" id="text-2">

<p>  Emacs Lisp是一种神秘莫测的黑客编程语言. 它的弱点是众所周知的, 它很慢, 它是单线程的, 同时它的变量是动态绑定的, 等等等等. 我当然还能继续说下去, 但这些不是主要目的. 尽管有这些看得见的弱点, 但Emacs Lisp仍然是github上最流行的lisp方言, 这一点有许多程序员对此发誓. 至于我, 能平均每天写50到100行之间的Emacs Lisp代码.
</p>
<p>
  当然, 我决定投资我的时间去学习它, 并且发现这样做了以后更加高兴. 我真的希望以后也能如此. 我所遇到的主要问题是劝阻我不要将时间投资到编程语言上. 但是现在, 我真的希望在多年前就能花时间去学习它.
</p>
<p>
  尽管遇到这样的问题, 又是什么使它如此的棒呢? 为什么任何人都应当学习Emacs Lisp呢?
</p>
<p>
  所以, 事不宜迟, 下面我就给出当今应当学习Emacs Lisp的5点理由:
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">不管学习多少Emacs Lisp都会立即使你的生活变得更美好</h2>
<div class="outline-text-2" id="text-3">

<p>  你学习到的东西能够立即改变你的生活, 不是从现在起一年, 不是毕业以后, 也不是当你的团队开始下一个项目时你才会使用到这门语言, 而是 <b>现在</b>!
</p>
<p>
  许多Lisp方言位于理论的范围内, 这很好, 也有它们的位置. 但是Emacs Lisp显得&#8221;更快更脏&#8221;. Emacs Lisp是非常有实践性的, 它能帮助你解决你每天所遇到的问题.
</p>
<p>
  如果你不懂任何Emacs Lisp, 那么你的.emacs文件有可能充满了为了安装所需的包而复制粘贴的各种代码, 这很正常. 但问题是这会迅速的变得难看. 不久之后你的.emacs文件就会变得非常难以维护. 学习Emacs Lisp会使你的Emacs生活更有秩序.
</p>
<p>
  如果你需要获得关于Emacs的任何帮助, 很有可能帮助你的那个人将会带来一些Lisp代码. 你很难对他说&#8221;对不起, 我不懂任何elisp!&#8221; 在##emacs站点, 会一点Emacs Lisp能使你更好的融入社区.
</p>
<p>
  今天, 学习Emacs Lisp, 会使你的生活更美好.
</p></div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Emacs Lisp和Emacs是一个真正有趣的编程平台</h2>
<div class="outline-text-2" id="text-4">

<p>  你并不一定非要是一个狂热的Emacs党. 但我想任何人都会同意Emacs是有趣的.
</p>
<p>
  Chances are that you have some exposure to the ideas behind Smalltalk, such as, you know, that whole “objected oriented” thing.(不知道怎么翻)另外, Samlltalk不仅仅是一种编程语言, 同时也是一种编程环境. 在Emacs上也拥有这种同样强大的精神. 因为对用户来讲一切东西都是立即可见的. Emacs是类似有这种精神的系统的一种主要继承者.
</p>
<p>  
  想要知道一个键绑定是做什么的吗? 按&#8221;C-h k&#8221;. 想要知道函数是做什么的吗? 按&#8221;C-h f&#8221;. 想要看函数的源代码, 单击刚才出现的buffer上的链接即可. 或者你想要在你需要的时候修改它, 仅仅改变函数定义出的代码同时按&#8221;C-x C-e&#8221;使之生效
</p>
<p>
  当用Emacs Lisp编程时, 你会觉得在这个系统上完成工作就像当今社会与石器时代相比. 另外还有红利: 这不仅仅是一些智力上的练习, 同时也是实践性的, 精彩的, 同时还能立即可用.
</p></div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">动态绑定确实很棒</h2>
<div class="outline-text-2" id="text-5">

<p>  让我们快速回顾一下动态绑定, 同时对比另一方面, 词法绑定(lexical binding).
</p>
<p>
  首先, 让我们看看变量绑定, 特别的, 用Javascript伪代码来表示, 如下:
</p>



<pre class="example">function createAdder(num_to_add)
{
  function(new_num)
  {
    return num_to_add + new_num;
  }
}

add2 = createAdder(2);

add10 = createAdder(10);

console.log(add2(6));  // = 8

console.log(add10(13)); // = 23
</pre>


<p>  
  我们来看看这段代码. createAdder函数用来返回另一个函数, 它是用来&#8221;创建&#8221;和&#8221;增加&#8221;的. createAdder将返回一个参数和一个新函数的和.
</p>
<p>
  重要的一点是, 无论createAdder什么时候返回, 它都仍然返回传给它的参数&ndash;num_to_add. Whatever variables are within a parent’s scope when a function gets created remain available to it for its execution(不知道怎么翻).
</p>
<p>
  词法作用域非常棒, 它能真正优雅地解决问题, 正式这点使Ajax和Node.js更加合理.
</p>
<p>
  动态作用域是不同的, 在动态作用域中, 变量在求值时绑定和计算. 计算变量在任意调用栈之上.
</p>
<p>
  用伪代码举个例子, 动态绑定的Javascript如下所示:
</p>



<pre class="example">function adder(new_num)
{
  return num_to_add + new_num;
}

function add2(new_num)
{l
  num_to_add = 2;
  return adder(new_num)
}

function add10(new_num)
{
  num_to_add = 10;
  return adder(new_num)
}

console.log(add2(6));  // = 8

console.log(add10(13));  // = 23
</pre>


<p>
  关键的不同点是adder函数, 变量 num<sub>to</sub><sub>add</sub> 似乎不涉及任何东西. 然而当语言是动态绑定的, 变量会在它被调用的地方引用. 因此add2函数设置的变量num_to_add, 当adder函数被调用时, 它才有可能被引用.
</p>
<p>
  你可能会想这听起来就好像是全局变量, 没错, 的确如此. 这就是为什么当今绝大部分语言都是词法绑定的, 而不是动态绑定的.
</p>
<p>
  实践中, 这这的不容易变糟. 你所想的变量改变是有据可查的. 当需要时代码仅仅使用动态范围解析, 当然这不需要经常进行.
</p>
<p>
  动态绑定事实上相当方便. 举个例子, 它可以使你的变量基于配置改变.
</p>
<p>
  另外还有一种宏, 叫做lexical-let, 能使你得到词法绑定的功能.
</p>
<p>
  如果这还不够, Emacs24现在支持词法作用域. 你只需要用elip文件设置一个变量告诉你想要的词法作用域.
</p>
<p>
  所以, 动态绑定确实很酷.
</p></div>

</div>




<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">单线程是件好事</h2>
<div class="outline-text-2" id="text-6">

<p>  Emacs Lisp是单线程的, 很可能永远都会是. 这可能会有点限制, 但却带来了相当大的简化.
</p>
<p>
  老实说, 如果你真的想处理锁和它们的同胞, 你不得不去其他地方看看.
</p></div>

</div>




<div id="outline-container-7" class="outline-2">
<h2 id="sec-7">当你理解Emacs Lisp后关于Emacs的一切都会更有意义</h2>
<div class="outline-text-2" id="text-7">

<p>  你可能已经注意到Emacs有相当纯净的文档, 而它的文档又相当广泛. 然而, 绝大部分文档仅仅在有Lisp代码的上下文中才有意义. 因此如果你不懂Emacs Lisp,  那么许多文档都是没用的.
</p>
<p>
  举个例子, 为了明白Emacs键绑定系统, 你需要了解键绑定的组成结构, 而这就意味着Lisp.
</p>
<p>
  老实说, 在Emacs中到处都是Emacs Lisp, 不了解Lisp也能用Emacs, 但当你理解了它的原生语言&ndash;Emacs Lisp后, 将会更好的使用Emacs.
</p>
<p>
  因此你应当学点Emacs Lisp. 它是一个相当迷人的编程环境, 而且很有可能使你的生活变得更容易. 另外, 对我来说, Emacs Lisp的问题是没有足够明显的dissuading. 事实上, 应该考虑加强它们.
</p>
<p>
  总之, 用Emacs Lisp工作使人兴奋, 我强类推荐给那些认为自己是一个严肃的程序员的人们.
</p></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[30分钟搭建一个octopress博客]]></title>
    <link href="http://wyj2046.github.io/blog/2013/05/01/first-step-in-octopress/"/>
    <updated>2013-05-01T20:58:00+08:00</updated>
    <id>http://wyj2046.github.io/blog/2013/05/01/first-step-in-octopress</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">缘起</h2>
<div class="outline-text-2" id="text-1">

<p>  早都有搭一个个人blog的想法了, 作为一名IT行业从业者:) 怎么能没有自己的独立博客呢. 当然, 将博客托管在csdn,cnblog上也不符合我们的折腾精神. 本着生命不惜,折腾不止的信念, 终于利用这个51假期, 在参考了众多资料后, 搭建了一个完全免费, 不限流量的基于octopress的个人博客(本着能省则省的原则, 连域名都用免费的). 同时作为一名Emacs党, orgmode也是标配, 用orgmode直接发布文章也就是刚需了, 这篇文章就是用orgmode写的
</p></div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">我的搭建环境</h2>
<div class="outline-text-2" id="text-2">

<p>  ubuntu12.04 + emacs24.2
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">安装ruby</h2>
<div class="outline-text-2" id="text-3">

<p>  很简单, 一句命令搞定
</p>


<pre class="example">sudo apt-get install ruby1.9.3
</pre>

</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">安装octopress</h2>
<div class="outline-text-2" id="text-4">




<pre class="example">git clone git://github.com/imathis/octopress.git octopress
cd octopress
sudo gem install bundler
rake install
</pre>

</div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Github账户配置</h2>
<div class="outline-text-2" id="text-5">

</div>

</div>




<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">把octopress部署到Github上</h2>
<div class="outline-text-2" id="text-6">

</div>

</div>




<div id="outline-container-7" class="outline-2">
<h2 id="sec-7">基本的blog配置</h2>
<div class="outline-text-2" id="text-7">


</div>

<div id="outline-container-7-1" class="outline-3">
<h3 id="sec-7-1">开启disqus</h3>
<div class="outline-text-3" id="text-7-1">

</div>

</div>

<div id="outline-container-7-2" class="outline-3">
<h3 id="sec-7-2">在侧边栏加新浪微博</h3>
<div class="outline-text-3" id="text-7-2">

</div>
</div>

</div>




<div id="outline-container-8" class="outline-2">
<h2 id="sec-8">将修改好的octopress配置提交到Github上去</h2>
<div class="outline-text-2" id="text-8">

</div>

</div>




<div id="outline-container-9" class="outline-2">
<h2 id="sec-9">写文章</h2>
<div class="outline-text-2" id="text-9">

</div>

</div>




<div id="outline-container-10" class="outline-2">
<h2 id="sec-10">增加org-mode导出功能</h2>
<div class="outline-text-2" id="text-10">

</div>

</div>




<div id="outline-container-11" class="outline-2">
<h2 id="sec-11">参考资料</h2>
<div class="outline-text-2" id="text-11">

</div>
</div>

]]></content>
  </entry>
  
</feed>
